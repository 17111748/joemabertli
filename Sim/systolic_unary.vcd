$date
    Oct  8, 2021  00:06:20
$end
$version
    TOOL:	xmsim	19.03-s010
$end
$timescale
    1 ps
$end

$scope module systolic_unary_matmul_tb $end

$scope module dut $end
$var parameter 32 !    BIT_WIDTH $end
$var parameter 32 "    SIZE $end
$var parameter 32 #    A_ROW $end
$var parameter 32 $    A_ROW_SIZE $end
$var parameter 32 %    A_COL $end
$var parameter 32 &    B_ROW $end
$var parameter 32 '    B_COL $end
$var wire      1 (    clk  $end
$var wire      1 )    reset_n  $end
$var wire      1 *    input_valid  $end
$var wire     12 +    A [11:0] $end
$var wire      1 ,    B [11] $end
$var wire      1 -    B [10] $end
$var wire      1 .    B [9] $end
$var wire      1 /    B [8] $end
$var wire      1 0    B [7] $end
$var wire      1 1    B [6] $end
$var wire      1 2    B [5] $end
$var wire      1 3    B [4] $end
$var wire      1 4    B [3] $end
$var wire      1 5    B [2] $end
$var wire      1 6    B [1] $end
$var wire      1 7    B [0] $end
$var reg       1 8    output_ready $end
$var reg      24 9    C [23:0] $end
$var parameter 32 :    COUNTER_N $end
$var parameter 32 ;    DATA_CLK_CYCLES $end
$var reg      12 <    A_reg [11:0] $end
$var reg      12 =    B_reg [11:0] $end
$var reg       3 >    counter_out [2:0] $end
$var reg       4 ?    A_comparator_in [3:0] $end
$var reg       2 @    A_is_negative [1:0] $end
$var reg       2 A    unary_A_comparator_out [1:0] $end
$var reg      24 B    unary_A [23:0] $end
$var reg       4 C    A_signed_bit [3:0] $end
$var reg       1 D    data_clk $end
$var reg       4 E    data_clk_count [3:0] $end
$var reg      36 F    intermediate_data_cur [35:0] $end
$var reg      24 G    intermediate_data_next [23:0] $end

$scope module counter_A $end
$var parameter 32 H    WIDTH $end
$var wire      1 I    en  $end
$var wire      1 J    clear  $end
$var wire      1 (    clk  $end
$var wire     32 K    N [31:0] $end
$var reg       3 L    Q [2:0] $end
$upscope $end


$scope module counter_data_clk $end
$var parameter 32 M    WIDTH $end
$var wire      1 N    en  $end
$var wire      1 O    clear  $end
$var wire      1 (    clk  $end
$var reg       4 P    Q [3:0] $end
$upscope $end


$scope begin genblk1[0] $end
$var parameter 32 Q    i $end

$scope module comparator_A $end
$var parameter 32 R    WIDTH $end
$var wire      3 S    counter [2:0] $end
$var wire      3 T    A [2:0] $end
$var reg       1 U    out $end
$upscope $end

$upscope $end


$scope begin genblk1[1] $end
$var parameter 32 V    i $end

$scope module comparator_A $end
$var parameter 32 W    WIDTH $end
$var wire      3 X    counter [2:0] $end
$var wire      3 Y    A [2:0] $end
$var reg       1 Z    out $end
$upscope $end

$upscope $end


$scope begin genblk2[0] $end
$var parameter 32 [    b_row $end

$scope begin genblk1[0] $end
$var parameter 32 \    b_col $end

$scope module systolic_nodes $end
$var parameter 32 ]    BIT_WIDTH $end
$var parameter 32 ^    SIZE $end
$var parameter 32 _    A_ROW $end
$var parameter 32 `    A_COL $end
$var parameter 32 a    B_ROW $end
$var parameter 32 b    B_COL $end
$var wire      1 (    clk  $end
$var wire      1 )    reset_n  $end
$var wire      1 c    data_clk  $end
$var wire      1 d    unary_A  $end
$var wire      1 e    AisNegative  $end
$var wire      1 5    binary_B [2] $end
$var wire      1 6    binary_B [1] $end
$var wire      1 7    binary_B [0] $end
$var wire      6 f    intermediate_data [5:0] $end
$var reg       6 g    out [5:0] $end
$var reg       4 h    unary_out [3:0] $end
$var reg       2 i    translated_B [1:0] $end
$var reg       3 j    adder_tree_out [2:0] $end

$scope begin genblk1[1] $end
$var parameter 32 k    i $end
$upscope $end


$scope begin genblk1[2] $end
$var parameter 32 l    i $end
$upscope $end


$scope begin genblk1[3] $end
$var parameter 32 m    i $end
$upscope $end


$scope module at $end
$var parameter 32 n    NUM_ELEMENTS $end
$var parameter 32 o    INDEX_W $end
$var wire      1 p    in [3] $end
$var wire      1 q    in [2] $end
$var wire      1 r    in [1] $end
$var wire      1 s    in [0] $end
$var reg       3 t    sum [2:0] $end

$scope begin genblk1 $end
$var parameter 32 u    LEFT_SIZE $end
$var parameter 32 v    LEFT_END_INDEX $end
$var parameter 32 w    LEFT_W $end
$var parameter 32 x    RIGHT_SIZE $end
$var parameter 32 y    RIGHT_INDEX $end
$var parameter 32 z    RIGHT_END_INDEX $end
$var parameter 32 {    RIGHT_W $end
$var reg       1 |    left_temp [0:0] $end
$var reg       2 }    right_temp [1:0] $end
$var reg       1 ~    carry_in $end

$scope module lefty $end
$var parameter 32 !!   NUM_ELEMENTS $end
$var parameter 32 "!   INDEX_W $end
$var wire      1 r    in [0] $end
$var reg       1 #!   sum [0:0] $end
$upscope $end


$scope module righty $end
$var parameter 32 $!   NUM_ELEMENTS $end
$var parameter 32 %!   INDEX_W $end
$var wire      1 p    in [1] $end
$var wire      1 q    in [0] $end
$var reg       2 &!   sum [1:0] $end
$upscope $end

$upscope $end

$upscope $end

$upscope $end

$upscope $end


$scope begin genblk1[1] $end
$var parameter 32 '!   b_col $end

$scope module systolic_nodes $end
$var parameter 32 (!   BIT_WIDTH $end
$var parameter 32 )!   SIZE $end
$var parameter 32 *!   A_ROW $end
$var parameter 32 +!   A_COL $end
$var parameter 32 ,!   B_ROW $end
$var parameter 32 -!   B_COL $end
$var wire      1 (    clk  $end
$var wire      1 )    reset_n  $end
$var wire      1 .!   data_clk  $end
$var wire      1 /!   unary_A  $end
$var wire      1 0!   AisNegative  $end
$var wire      1 2    binary_B [2] $end
$var wire      1 3    binary_B [1] $end
$var wire      1 4    binary_B [0] $end
$var wire      6 1!   intermediate_data [5:0] $end
$var reg       6 2!   out [5:0] $end
$var reg       4 3!   unary_out [3:0] $end
$var reg       2 4!   translated_B [1:0] $end
$var reg       3 5!   adder_tree_out [2:0] $end

$scope begin genblk1[1] $end
$var parameter 32 6!   i $end
$upscope $end


$scope begin genblk1[2] $end
$var parameter 32 7!   i $end
$upscope $end


$scope begin genblk1[3] $end
$var parameter 32 8!   i $end
$upscope $end


$scope module at $end
$var parameter 32 9!   NUM_ELEMENTS $end
$var parameter 32 :!   INDEX_W $end
$var wire      1 ;!   in [3] $end
$var wire      1 <!   in [2] $end
$var wire      1 =!   in [1] $end
$var wire      1 >!   in [0] $end
$var reg       3 ?!   sum [2:0] $end

$scope begin genblk1 $end
$var parameter 32 @!   LEFT_SIZE $end
$var parameter 32 A!   LEFT_END_INDEX $end
$var parameter 32 B!   LEFT_W $end
$var parameter 32 C!   RIGHT_SIZE $end
$var parameter 32 D!   RIGHT_INDEX $end
$var parameter 32 E!   RIGHT_END_INDEX $end
$var parameter 32 F!   RIGHT_W $end
$var reg       1 G!   left_temp [0:0] $end
$var reg       2 H!   right_temp [1:0] $end
$var reg       1 I!   carry_in $end

$scope module lefty $end
$var parameter 32 J!   NUM_ELEMENTS $end
$var parameter 32 K!   INDEX_W $end
$var wire      1 =!   in [0] $end
$var reg       1 L!   sum [0:0] $end
$upscope $end


$scope module righty $end
$var parameter 32 M!   NUM_ELEMENTS $end
$var parameter 32 N!   INDEX_W $end
$var wire      1 ;!   in [1] $end
$var wire      1 <!   in [0] $end
$var reg       2 O!   sum [1:0] $end
$upscope $end

$upscope $end

$upscope $end

$upscope $end

$upscope $end

$upscope $end


$scope begin genblk2[1] $end
$var parameter 32 P!   b_row $end

$scope begin genblk1[0] $end
$var parameter 32 Q!   b_col $end

$scope module systolic_nodes $end
$var parameter 32 R!   BIT_WIDTH $end
$var parameter 32 S!   SIZE $end
$var parameter 32 T!   A_ROW $end
$var parameter 32 U!   A_COL $end
$var parameter 32 V!   B_ROW $end
$var parameter 32 W!   B_COL $end
$var wire      1 (    clk  $end
$var wire      1 )    reset_n  $end
$var wire      1 X!   data_clk  $end
$var wire      1 Y!   unary_A  $end
$var wire      1 Z!   AisNegative  $end
$var wire      1 /    binary_B [2] $end
$var wire      1 0    binary_B [1] $end
$var wire      1 1    binary_B [0] $end
$var wire      6 [!   intermediate_data [5:0] $end
$var reg       6 \!   out [5:0] $end
$var reg       4 ]!   unary_out [3:0] $end
$var reg       2 ^!   translated_B [1:0] $end
$var reg       3 _!   adder_tree_out [2:0] $end

$scope begin genblk1[1] $end
$var parameter 32 `!   i $end
$upscope $end


$scope begin genblk1[2] $end
$var parameter 32 a!   i $end
$upscope $end


$scope begin genblk1[3] $end
$var parameter 32 b!   i $end
$upscope $end


$scope module at $end
$var parameter 32 c!   NUM_ELEMENTS $end
$var parameter 32 d!   INDEX_W $end
$var wire      1 e!   in [3] $end
$var wire      1 f!   in [2] $end
$var wire      1 g!   in [1] $end
$var wire      1 h!   in [0] $end
$var reg       3 i!   sum [2:0] $end

$scope begin genblk1 $end
$var parameter 32 j!   LEFT_SIZE $end
$var parameter 32 k!   LEFT_END_INDEX $end
$var parameter 32 l!   LEFT_W $end
$var parameter 32 m!   RIGHT_SIZE $end
$var parameter 32 n!   RIGHT_INDEX $end
$var parameter 32 o!   RIGHT_END_INDEX $end
$var parameter 32 p!   RIGHT_W $end
$var reg       1 q!   left_temp [0:0] $end
$var reg       2 r!   right_temp [1:0] $end
$var reg       1 s!   carry_in $end

$scope module lefty $end
$var parameter 32 t!   NUM_ELEMENTS $end
$var parameter 32 u!   INDEX_W $end
$var wire      1 g!   in [0] $end
$var reg       1 v!   sum [0:0] $end
$upscope $end


$scope module righty $end
$var parameter 32 w!   NUM_ELEMENTS $end
$var parameter 32 x!   INDEX_W $end
$var wire      1 e!   in [1] $end
$var wire      1 f!   in [0] $end
$var reg       2 y!   sum [1:0] $end
$upscope $end

$upscope $end

$upscope $end

$upscope $end

$upscope $end


$scope begin genblk1[1] $end
$var parameter 32 z!   b_col $end

$scope module systolic_nodes $end
$var parameter 32 {!   BIT_WIDTH $end
$var parameter 32 |!   SIZE $end
$var parameter 32 }!   A_ROW $end
$var parameter 32 ~!   A_COL $end
$var parameter 32 !"   B_ROW $end
$var parameter 32 ""   B_COL $end
$var wire      1 (    clk  $end
$var wire      1 )    reset_n  $end
$var wire      1 #"   data_clk  $end
$var wire      1 $"   unary_A  $end
$var wire      1 %"   AisNegative  $end
$var wire      1 ,    binary_B [2] $end
$var wire      1 -    binary_B [1] $end
$var wire      1 .    binary_B [0] $end
$var wire      6 &"   intermediate_data [5:0] $end
$var reg       6 '"   out [5:0] $end
$var reg       4 ("   unary_out [3:0] $end
$var reg       2 )"   translated_B [1:0] $end
$var reg       3 *"   adder_tree_out [2:0] $end

$scope begin genblk1[1] $end
$var parameter 32 +"   i $end
$upscope $end


$scope begin genblk1[2] $end
$var parameter 32 ,"   i $end
$upscope $end


$scope begin genblk1[3] $end
$var parameter 32 -"   i $end
$upscope $end


$scope module at $end
$var parameter 32 ."   NUM_ELEMENTS $end
$var parameter 32 /"   INDEX_W $end
$var wire      1 0"   in [3] $end
$var wire      1 1"   in [2] $end
$var wire      1 2"   in [1] $end
$var wire      1 3"   in [0] $end
$var reg       3 4"   sum [2:0] $end

$scope begin genblk1 $end
$var parameter 32 5"   LEFT_SIZE $end
$var parameter 32 6"   LEFT_END_INDEX $end
$var parameter 32 7"   LEFT_W $end
$var parameter 32 8"   RIGHT_SIZE $end
$var parameter 32 9"   RIGHT_INDEX $end
$var parameter 32 :"   RIGHT_END_INDEX $end
$var parameter 32 ;"   RIGHT_W $end
$var reg       1 <"   left_temp [0:0] $end
$var reg       2 ="   right_temp [1:0] $end
$var reg       1 >"   carry_in $end

$scope module lefty $end
$var parameter 32 ?"   NUM_ELEMENTS $end
$var parameter 32 @"   INDEX_W $end
$var wire      1 2"   in [0] $end
$var reg       1 A"   sum [0:0] $end
$upscope $end


$scope module righty $end
$var parameter 32 B"   NUM_ELEMENTS $end
$var parameter 32 C"   INDEX_W $end
$var wire      1 0"   in [1] $end
$var wire      1 1"   in [0] $end
$var reg       2 D"   sum [1:0] $end
$upscope $end

$upscope $end

$upscope $end

$upscope $end

$upscope $end

$upscope $end

$upscope $end

$upscope $end

$enddefinitions $end
$dumpvars
b10 C"
b10 B"
b1 @"
b1 ?"
b10 ;"
b11 :"
b10 9"
b10 8"
b1 7"
b1 6"
b1 5"
b11 /"
b100 ."
b11 -"
b10 ,"
b1 +"
b10 ""
b10 !"
b10 ~!
b10 }!
b10 |!
b11 {!
b1 z!
b10 x!
b10 w!
b1 u!
b1 t!
b10 p!
b11 o!
b10 n!
b10 m!
b1 l!
b1 k!
b1 j!
b11 d!
b100 c!
b11 b!
b10 a!
b1 `!
b10 W!
b10 V!
b10 U!
b10 T!
b10 S!
b11 R!
b0 Q!
b1 P!
b10 N!
b10 M!
b1 K!
b1 J!
b10 F!
b11 E!
b10 D!
b10 C!
b1 B!
b1 A!
b1 @!
b11 :!
b100 9!
b11 8!
b10 7!
b1 6!
b10 -!
b10 ,!
b10 +!
b10 *!
b10 )!
b11 (!
b1 '!
b10 %!
b10 $!
b1 "!
b1 !!
b10 {
b11 z
b10 y
b10 x
b1 w
b1 v
b1 u
b11 o
b100 n
b11 m
b10 l
b1 k
b10 b
b10 a
b10 `
b10 _
b10 ^
b11 ]
b0 \
b0 [
b11 W
b1 V
b11 R
b0 Q
b100 M
b11 H
b110 ;
b101 :
b10 '
b10 &
b10 %
b10 $
b10 #
b10 "
b11 !
0(
0)
x*
bx +
x,
x-
x.
x/
x0
x1
x2
x3
x4
x5
x6
x7
x8
b0 9
bx <
bx =
bx >
b0 ?
b0 @
bx A
b0xx B
b0 C
xD
bx E
b0 F
b0 G
1I
1J
b101 K
bx L
xN
1O
bx P
bx S
b0 T
xU
bx X
b0 Y
xZ
xc
xd
0e
b0 f
b0 g
b0xxx h
bx i
bx j
0p
xq
xr
xs
bx t
x|
bx }
x~
x#!
bx &!
x.!
0/!
00!
b0 1!
b0 2!
b0 3!
bx 4!
b0 5!
0;!
0<!
0=!
0>!
b0 ?!
0G!
b0 H!
0I!
0L!
b0 O!
xX!
xY!
0Z!
b0 [!
b0 \!
b0xxx ]!
bx ^!
bx _!
0e!
xf!
xg!
xh!
bx i!
xq!
bx r!
xs!
xv!
bx y!
x#"
0$"
0%"
b0 &"
b0 '"
b0 ("
bx )"
b0 *"
00"
01"
02"
03"
b0 4"
0<"
b0 ="
0>"
0A"
b0 D"
$end
#5000000
0,
1-
0.
0/
00
01
02
13
04
05
16
07
b11010001 +
1(
b10 )"
b0 ^!
b10 4!
b10 i
b0xx0 ]!
b0x00 ]!
b0 ]!
b0xx0 h
0s
0f!
0g!
0h!
0~
b0 y!
0v!
0s!
0q!
b0 r!
b0 i!
b0 _!
b0 P
b0 L
1*
1)
b0 >
b0 E
1D
08
1c
1.!
1X!
1#"
1N
b0 S
b0 X
0O
0J
0U
0Z
b0x A
b0 A
b0 B
0d
0Y!
b0x0 h
b0 h
0q
0r
b0 &!
0#!
0|
b0 }
b0 t
b0 j
b1 ?
b1 T
1U
b1 A
b1 B
1d
b100 h
b110 h
1q
1r
b1 &!
1#!
1|
b1 }
b10 t
b10 j
#10000000
0(
#15000000
1(
b101 B
b10 g
b1 P
b1 L
0*
b1 >
b1 E
b10 G
0D
0c
0.!
0X!
0#"
0N
b1 S
b1 X
0U
b0 A
b100 B
0d
b10 h
b0 h
0q
0r
b0 &!
0#!
0|
b0 }
b0 t
b0 j
#20000000
0(
#25000000
1(
b0 B
b10000 B
b10 L
b10 >
b10 S
b10 X
#30000000
0(
#35000000
1(
b0 B
b1000000 B
b11 L
b11 >
b11 S
b11 X
#40000000
0(
#45000000
1(
b0 B
b100000000 B
b100 L
b100 >
b100 S
b100 X
#50000000
0(
#55000000
1(
b0 B
b10000000000 B
b101 L
b101 >
b101 S
b101 X
#60000000
0(
#65000000
1(
b0 B
b1000000000000 B
b0 L
1/!
b100 3!
b110 3!
b0 >
1D
1c
1.!
1X!
1#"
1N
b0 S
b0 X
1<!
1=!
1U
b1 O!
1L!
1G!
b1 H!
b1 A
b10 ?!
b1000000000001 B
1d
b100 h
b110 h
b10 5!
1q
1r
b1 &!
1#!
1|
b1 }
b10 t
b10 j
b11 ?
b1011 ?
b10000000000000 F
b10 [!
b11 T
b10 Y
1Z
b11 A
b1000000000011 B
1Y!
#70000000
0(
#75000000
1(
b1000000001111 B
b1111 B
b100000000001111 B
b10 \!
b10 2!
b10 P
b1 L
0/!
b10 3!
b0 3!
b1 >
b10 E
b10000010 G
b10000010000010 G
0D
0c
0.!
0X!
0#"
0N
b1 S
b1 X
0<!
0=!
b0 O!
0L!
0G!
b0 H!
b0 ?!
b0 5!
#80000000
0(
#85000000
1(
b100000000111111 B
b111111 B
b10000000000111111 B
b100 g
b10 L
b10 >
b10000010000100 G
b10 S
b10 X
0Z
b1 A
b10000000000111101 B
0Y!
#90000000
0(
#95000000
1(
b10000000000110101 B
b10000000011110101 B
b11110101 B
b1000000000011110101 B
b110 g
b11 L
b11 >
b10000010000110 G
b11 S
b11 X
0U
b0 A
b1000000000011110100 B
0d
b10 h
b0 h
0q
0r
b0 &!
0#!
0|
b0 }
b0 t
b0 j
#100000000
0(
#105000000
1(
b1000000000011110000 B
b1000000000011010000 B
b1000000001111010000 B
b1111010000 B
b100000000001111010000 B
b100 L
b100 >
b100 S
b100 X
#110000000
0(
#115000000
1(
b100000000001111000000 B
b100000000001101000000 B
b100000000111101000000 B
b111101000000 B
b10000000000111101000000 B
b101 L
b101 >
b101 S
b101 X
#120000000
0(
#125000000
1(
b10000000000111100000000 B
b10000000000110100000000 B
b10000000011110100000000 B
b11110100000000 B
b0 L
1/!
1$"
b100 3!
b110 3!
b100 ("
b110 ("
b0 >
1D
1c
1.!
1X!
1#"
1N
b0 S
b0 X
11"
12"
1<!
1=!
1U
1Z
b1 D"
1A"
b1 O!
1L!
1G!
b1 H!
1<"
b1 ="
b10 A
b11 A
b10 ?!
b10 4"
b11110100000011 B
1d
1Y!
b100 h
b110 h
b10 *"
b10 5!
1q
1r
b1 &!
1#!
1|
b1 }
b10 t
b10 j
b1000 ?
b0 ?
b10000110000000000000 F
b10000010000110000000000000 F
b110 [!
b10 &"
b0 T
b0 Y
0U
0Z
b1 A
b0 A
b11110100000000 B
0d
0Y!
b10 h
b0 h
0q
0r
b0 &!
0#!
0|
b0 }
b0 t
b0 j
#130000000
0(
#135000000
1(
b11110000000000 B
b11010000000000 B
b1111010000000000 B
b100 '"
b110 \!
b0 g
b11 P
b1 L
b1 >
b11 E
b10000010000000 G
b110000010000000 G
b100000110000010000000 G
0D
0c
0.!
0X!
0#"
0N
b1 S
b1 X
#140000000
0(
#145000000
1(
b1111000000000000 B
b1101000000000000 B
b111101000000000000 B
b110 '"
b100 2!
b10 L
0$"
b10 ("
b0 ("
b10 >
b100000110000100000000 G
b110000110000100000000 G
b10 S
b10 X
01"
02"
b0 D"
0A"
0<"
b0 ="
b0 4"
b0 *"
#150000000
0(
#155000000
1(
b111100000000000000 B
b110100000000000000 B
b11110100000000000000 B
b110 2!
b11 L
0/!
b10 3!
b0 3!
b11 >
b110000110000110000000 G
b11 S
b11 X
0<!
0=!
b0 O!
0L!
0G!
b0 H!
b0 ?!
b0 5!
#160000000
0(
#165000000
1(
b11110000000000000000 B
b11010000000000000000 B
b1111010000000000000000 B
b100 L
b100 >
b100 S
b100 X
#170000000
0(
#175000000
1(
b1111000000000000000000 B
b1101000000000000000000 B
b111101000000000000000000 B
b101 L
b101 >
b101 S
b101 X
#180000000
0(
#185000000
1(
b111100000000000000000000 B
b110100000000000000000000 B
b0 L
b0 >
1D
1c
1.!
1X!
1#"
1N
b0 S
b0 X
b10 9
b10000110000000000000000000 F
b110000110000110000000000000000000 F
b0 [!
b110 &"
#190000000
0(
#195000000
1(
b110000000000000000000000 B
b10000000000000000000000 B
b0 \!
b0 2!
b100 P
b1 L
b1 >
b100 E
b110000110000000000000 G
b110000000000000000000 G
0D
0c
0.!
0X!
0#"
0N
b1 S
b1 X
#200000000
0(
#205000000
1(
b0 B
b10 L
b10 >
b10 S
b10 X
#210000000
0(
#215000000
1(
b11 L
b11 >
b11 S
b11 X
#220000000
0(
#225000000
1(
b100 L
b100 >
b100 S
b100 X
#230000000
0(
#235000000
1(
b101 L
b101 >
b101 S
b101 X
#240000000
0(
#245000000
1(
b0 L
b0 >
1D
1c
1.!
1X!
1#"
1N
b0 S
b0 X
b110000010 9
b110000110000010 9
b110000110000000000000000000000000 F
b110000000000000000000000000000000 F
b0 &"
#250000000
0(
#255000000
1(
b0 '"
b101 P
b1 L
b1 >
b101 E
b0 G
0D
0c
0.!
0X!
0#"
0N
b1 S
b1 X
#260000000
0(
#265000000
1(
b10 L
b10 >
b10 S
b10 X
#270000000
0(
#275000000
1(
b11 L
b11 >
b11 S
b11 X
#280000000
0(
#285000000
1(
b100 L
b100 >
b100 S
b100 X
#290000000
0(
#295000000
1(
b101 L
b101 >
b101 S
b101 X
#300000000
0(
#305000000
1(
b0 L
b0 >
1D
1c
1.!
1X!
1#"
1N
b0 S
b0 X
b110000110000110000010 9
b0 F
#310000000
0(
#315000000
1(
b110 P
b1 L
b1 >
b110 E
0D
18
0c
0.!
0X!
0#"
0N
b1 S
b1 X
#320000000
0(
#325000000
1(
b10 L
b10 >
b10 S
b10 X
#330000000
0(
#335000000
1(
b11 L
b11 >
b11 S
b11 X
#340000000
0(
#345000000
1(
b100 L
b100 >
b100 S
b100 X
#350000000
0(
#355000000
1(
b101 L
b101 >
b101 S
b101 X
#360000000
0(
#365000000
1(
b0 L
b0 >
1D
1c
1.!
1X!
1#"
1N
b0 S
b0 X
#370000000
0(
#375000000
1(
b111 P
b1 L
b1 >
b111 E
0D
08
0c
0.!
0X!
0#"
0N
b1 S
b1 X
#380000000
0(
#385000000
1(
b10 L
b10 >
b10 S
b10 X
#390000000
0(
#395000000
1(
b11 L
b11 >
b11 S
b11 X
#400000000
0(
#405000000
1(
b100 L
b100 >
b100 S
b100 X
#410000000
0(
#415000000
1(
b101 L
b101 >
b101 S
b101 X
#420000000
0(
#425000000
1(
b0 L
b0 >
1D
1c
1.!
1X!
1#"
1N
b0 S
b0 X
#430000000
0(
#435000000
1(
b1000 P
b1 L
b1 >
b1000 E
0D
0c
0.!
0X!
0#"
0N
b1 S
b1 X
#440000000
0(
#445000000
1(
b10 L
b10 >
b10 S
b10 X
#450000000
0(
#455000000
1(
b11 L
b11 >
b11 S
b11 X
#460000000
0(
#465000000
1(
b100 L
b100 >
b100 S
b100 X
#470000000
0(
#475000000
1(
b101 L
b101 >
b101 S
b101 X
#480000000
0(
#485000000
1(
b0 L
b0 >
1D
1c
1.!
1X!
1#"
1N
b0 S
b0 X
#490000000
0(
#495000000
1(
b1001 P
b1 L
b1 >
b1001 E
0D
0c
0.!
0X!
0#"
0N
b1 S
b1 X
#500000000
0(
#505000000
1(
b10 L
b10 >
b10 S
b10 X
#510000000
0(
#515000000
1(
b11 L
b11 >
b11 S
b11 X
#520000000
0(
#525000000
1(
b100 L
b100 >
b100 S
b100 X
#530000000
0(
#535000000
1(
b101 L
b101 >
b101 S
b101 X
#540000000
0(
#545000000
1(
b0 L
b0 >
1D
1c
1.!
1X!
1#"
1N
b0 S
b0 X
#550000000
0(
#555000000
1(
b1010 P
b1 L
b1 >
b1010 E
0D
0c
0.!
0X!
0#"
0N
b1 S
b1 X
#560000000
0(
#565000000
1(
b10 L
b10 >
b10 S
b10 X
#570000000
0(
#575000000
1(
b11 L
b11 >
b11 S
b11 X
#580000000
0(
#585000000
1(
b100 L
b100 >
b100 S
b100 X
#590000000
0(
#595000000
1(
b101 L
b101 >
b101 S
b101 X
#600000000
0(
#605000000
1(
b0 L
b0 >
1D
1c
1.!
1X!
1#"
1N
b0 S
b0 X
#610000000
0(
#615000000
1(
b1011 P
b1 L
b1 >
b1011 E
0D
0c
0.!
0X!
0#"
0N
b1 S
b1 X
#620000000
0(
#625000000
1(
b10 L
b10 >
b10 S
b10 X
#630000000
0(
#635000000
1(
b11 L
b11 >
b11 S
b11 X
#640000000
0(
#645000000
1(
b100 L
b100 >
b100 S
b100 X
#650000000
0(
#655000000
1(
b101 L
b101 >
b101 S
b101 X
#660000000
0(
#665000000
1(
b0 L
b0 >
1D
1c
1.!
1X!
1#"
1N
b0 S
b0 X
#670000000
0(
#675000000
1(
b1100 P
b1 L
b1 >
b1100 E
0D
0c
0.!
0X!
0#"
0N
b1 S
b1 X
#680000000
0(
#685000000
1(
b10 L
b10 >
b10 S
b10 X
#690000000
0(
#695000000
1(
b11 L
b11 >
b11 S
b11 X
#700000000
0(
#705000000
1(
b100 L
b100 >
b100 S
b100 X
#710000000
0(
#715000000
1(
b101 L
b101 >
b101 S
b101 X
#720000000
0(
#725000000
1(
b0 L
b0 >
1D
1c
1.!
1X!
1#"
1N
b0 S
b0 X
#730000000
0(
#735000000
1(
b1101 P
b1 L
b1 >
b1101 E
0D
0c
0.!
0X!
0#"
0N
b1 S
b1 X
#740000000
0(
#745000000
1(
b10 L
b10 >
b10 S
b10 X
#750000000
0(
#755000000
1(
b11 L
b11 >
b11 S
b11 X
#760000000
0(
#765000000
1(
b100 L
b100 >
b100 S
b100 X
#770000000
0(
#775000000
1(
b101 L
b101 >
b101 S
b101 X
#780000000
0(
#785000000
1(
b0 L
b0 >
1D
1c
1.!
1X!
1#"
1N
b0 S
b0 X
#790000000
0(
#795000000
1(
b1110 P
b1 L
b1 >
b1110 E
0D
0c
0.!
0X!
0#"
0N
b1 S
b1 X
#800000000
0(
#805000000
1(
b10 L
b10 >
b10 S
b10 X
#810000000
0(
#815000000
1(
b11 L
b11 >
b11 S
b11 X
#820000000
0(
#825000000
1(
b100 L
b100 >
b100 S
b100 X
#830000000
0(
#835000000
1(
b101 L
b101 >
b101 S
b101 X
#840000000
0(
#845000000
1(
b0 L
b0 >
1D
1c
1.!
1X!
1#"
1N
b0 S
b0 X
#850000000
0(
#855000000
1(
b1111 P
b1 L
b1 >
b1111 E
0D
0c
0.!
0X!
0#"
0N
b1 S
b1 X
#860000000
0(
#865000000
1(
b10 L
b10 >
b10 S
b10 X
#870000000
0(
#875000000
1(
b11 L
b11 >
b11 S
b11 X
#880000000
0(
#885000000
1(
b100 L
b100 >
b100 S
b100 X
#890000000
0(
#895000000
1(
b101 L
b101 >
b101 S
b101 X
#900000000
0(
#905000000
1(
b0 L
b0 >
1D
1c
1.!
1X!
1#"
1N
b0 S
b0 X
#910000000
0(
#915000000
1(
b0 P
b1 L
b1 >
b0 E
0D
0c
0.!
0X!
0#"
0N
b1 S
b1 X
#920000000
0(
#925000000
1(
b10 L
b10 >
b10 S
b10 X
#930000000
0(
#935000000
1(
b11 L
b11 >
b11 S
b11 X
#940000000
0(
#945000000
1(
b100 L
b100 >
b100 S
b100 X
#950000000
0(
#955000000
1(
b101 L
b101 >
b101 S
b101 X
#960000000
0(
#965000000
1(
b0 L
b0 >
1D
1c
1.!
1X!
1#"
1N
b0 S
b0 X
b1 ?
b1 T
1U
b1 A
b1 B
1d
b100 h
b110 h
1q
1r
b1 &!
1#!
1|
b1 }
b10 t
b10 j
#970000000
0(
#975000000
1(
b101 B
b10 g
b1 P
b1 L
b1 >
b1 E
b10 G
0D
0c
0.!
0X!
0#"
0N
b1 S
b1 X
0U
b0 A
b100 B
0d
b10 h
b0 h
0q
0r
b0 &!
0#!
0|
b0 }
b0 t
b0 j
#980000000
0(
#985000000
1(
b0 B
b10000 B
b10 L
b10 >
b10 S
b10 X
#990000000
0(
#995000000
1(
b0 B
b1000000 B
b11 L
b11 >
b11 S
b11 X
#1000000000
0(
#1005000000
1(
b0 B
b100000000 B
b100 L
b100 >
b100 S
b100 X
#1010000000
0(
#1015000000
